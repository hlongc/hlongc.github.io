[{"title":"三数之和","date":"2021-09-01T15:07:01.000Z","path":"2021/09/01/3sum/","text":"原题链接 题目描述给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。 注意：答案中不可以包含重复的三元组。 示例 1：输入：nums = [-1,0,1,2,-1,-4]输出：[[-1,-1,2],[-1,0,1]] 示例 2：输入：nums = []输出：[] 示例 3：输入：nums = [0]输出：[] 题目分析需要在数组中找到三个元素和为0的组合，并且是不重复的三元组，如果不存在则返回空数组，那我们可以对数组进行升序，升序有两个好处: 方便跳过重复元素(因为寻找的是不重复的三元组)，因为相同的元素都是贴在一起的 当正在遍历的元素大于0时，那就可以停止遍历了，说明后续的元素都是大于0，已经不符合题意 在排序完成以后，依次遍历每个元素，假设当前遍历元素为nums[i]，那需要在剩下的右侧元素中找出其余两个元素，对此可以使用双指针进行遍历left = i + 1, right = length - 1，判断num[i] + nums[left] + nums[right] = 0是否满足，如果满足则找到一组，然后根据情况移动双指针。 代码实现1234567891011121314151617181920212223242526272829/** * @param &#123;number[]&#125; nums * @return &#123;number[][]&#125; */var threeSum = function(nums) &#123; nums.sort((a, b) =&gt; a - b) // 进行升序，方便跳过重复元素 const ret = [], len = nums.length for (let i = 0; i &lt; len - 2; i++) &#123; if (nums[i] &gt; 0) break // 当前元素已经大于0，不满足条件 // 跳过重复元素,可以避免这种情况发生[-1, -1, 0, 1],如果不跳过第二次的-1，那么会有两个重复的结果[[-1, 0, 1], [-1, 0, 1]]不满足题意 if (nums[i] === nums[i - 1]) continue const target = -nums[i] let left = i + 1, right = len - 1 while(left &lt; right) &#123; const sum = nums[left] + nums[right] if (sum === target) &#123; ret.push([nums[i], nums[left], nums[right]]) while(left &lt; right &amp;&amp; nums[left] === nums[left + 1]) left++ // 跳过相同元素，避免结果重复，下面同理 while(left &lt; right &amp;&amp; nums[right] === nums[right - 1]) right-- left++ right-- &#125; else &#123; // 当前值大于目标值说明过大，移动右指针，反之移动左指针 sum &gt; target ? right-- : left++ &#125; &#125; &#125; return ret&#125;;","tags":[{"name":"算法","slug":"算法","permalink":"https://github.com/hlongc/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://github.com/hlongc/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"git撤回已提交到远程的commit信息","date":"2021-08-31T05:55:24.000Z","path":"2021/08/31/git-reset/","text":"场景：不小心把本地调试的代码推送到了远程，现在需要撤回本次commit(红色框) 查看提交的日志信息123git reflogeab78c1 (HEAD -&gt; master, origin/master) HEAD@&#123;0&#125;: commit: feat: add foo.txt2ea574d HEAD@&#123;1&#125;: commit (initial): feat: add readme.md 可以看到eab78c1就是我们要撤回的版本信 通过hash值在本地进行回退通过git reset命令进行回退，该命令后面可以跟参数 参数 含义 –soft 不删除工作空间的改动代码 ，撤销commit，不撤销git add file –hard 删除工作空间的改动代码，撤销commit且撤销add 由于我不再需要调试的代码，直接使用--hard选项，并且跟上撤回到指定版本的hash值 12git reset --hard 2ea574dHEAD is now at 2ea574d feat: add readme.md 撤回成功以后，再通过git log查看当前的提交日志，可以看到已经回到了第一次提交的状态 123456git logcommit 2ea574df7af093c927adcdb1a98151e8b8a5ff7f (HEAD -&gt; master)Author: Date: Tue Aug 31 15:04:55 2021 +0800 feat: add readme.md 把撤回以后的结果推送到远程如果通过git push origin master推送到远程仓库，会出现报错，因为远程仓库和本地版本不一致 此时可以通过参数--force进行强制覆盖 最后查看远程仓库的commit信息，可以看到已经回退成功。","tags":[{"name":"git","slug":"git","permalink":"https://github.com/hlongc/tags/git/"}]},{"title":"Hello World","date":"2021-08-31T05:45:21.417Z","path":"2021/08/31/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]